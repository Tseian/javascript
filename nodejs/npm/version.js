// 版本约束 x.y.z
// x:主要版本，可能会向下不兼容，功能或使用方式发生重大变更
// y:次要版本，向下兼容，增加功能
// z:修订版本，修改bug，性能优化
// 依赖包的版本管理  

// ~  如果在比较器上指定了次要版本，则允许修补版本级别的更改,
//    如果指定了主要版本，则允许次要版本级别的更改
/*
~1.2.3：= >=1.2.3 <1.(2+1).0：=>=1.2.3 <1.3.0
~1.2：= >=1.2.0 <1.(2+1).0：= >=1.2.0 <1.3.0（与相同1.2.x）
~1：= >=1.0.0 <(1+1).0.0：= >=1.0.0 <2.0.0（与相同1.x）
~0.2.3：= >=0.2.3 <0.(2+1).0：=>=0.2.3 <0.3.0
~0.2：= >=0.2.0 <0.(2+1).0：= >=0.2.0 <0.3.0（与相同0.2.x）
~0：= >=0.0.0 <(0+1).0.0：= >=0.0.0 <1.0.0（与相同0.x）
~1.2.3-beta.2：= >=1.2.3-beta.2 <1.3.0请注意1.2.3，
 如果版本大于或等于，则允许使用该版本的预发行版本beta.2。
 因此，1.2.3-beta.4将允许，但 1.2.4-beta.2不允许，
 因为它是另一个[major, minor, patch]元组的预发布版本。
*/

// ^ 允许所做的更改不会修改[major, minor, patch]元组中最左边的非零数字 
/*
^1.2.3 ：= >=1.2.3 <2.0.0
^0.2.3 ：= >=0.2.3 <0.3.0
^0.0.3 ：= >=0.0.3 <0.0.4
*/

// 锁定 这个我是第一个人开发 package.json npm i -> package-lock.json文件
// 把当前package.josn里面的所有npm包的依赖版本都记录下来，
// npm i -> package-lock.json -> package.json npm i . ~1.2.3 -> 1.2.10
// package-lock.json